/**
 * Open Service Cloud API
 * Open Service Cloud API to manage different backend cloud services.
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: wanghui71leon@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorSpec from '../model/ErrorSpec';
import StorageResourceCreateRequest from '../model/StorageResourceCreateRequest';
import StorageResourceSpec from '../model/StorageResourceSpec';

/**
* Storage service.
* @module api/StorageApi
* @version 0.0.3
*/
export default class StorageApi {

    /**
    * Constructs a new StorageApi. 
    * @alias module:api/StorageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storageResourceCreate operation.
     * @callback module:api/StorageApi~storageResourceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageResourceSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new storage resource.
     * @param {module:model/StorageResourceCreateRequest} storageResourceCreateRequest parameters for the requested storage resource.
     * @param {module:api/StorageApi~storageResourceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageResourceSpec}
     */
    storageResourceCreate(storageResourceCreateRequest, callback) {
      let postBody = storageResourceCreateRequest;
      // verify the required parameter 'storageResourceCreateRequest' is set
      if (storageResourceCreateRequest === undefined || storageResourceCreateRequest === null) {
        throw new Error("Missing the required parameter 'storageResourceCreateRequest' when calling storageResourceCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageResourceSpec;
      return this.apiClient.callApi(
        '/v1alpha/storage_resources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageResourceDelete operation.
     * @callback module:api/StorageApi~storageResourceDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove specified storage resource.
     * @param {String} srId uuid of storage resource created
     * @param {module:model/String} cloudProvider cloud provider name
     * @param {module:api/StorageApi~storageResourceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    storageResourceDelete(srId, cloudProvider, callback) {
      let postBody = null;
      // verify the required parameter 'srId' is set
      if (srId === undefined || srId === null) {
        throw new Error("Missing the required parameter 'srId' when calling storageResourceDelete");
      }
      // verify the required parameter 'cloudProvider' is set
      if (cloudProvider === undefined || cloudProvider === null) {
        throw new Error("Missing the required parameter 'cloudProvider' when calling storageResourceDelete");
      }

      let pathParams = {
        'sr_id': srId
      };
      let queryParams = {
        'cloud_provider': cloudProvider
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1alpha/storage_resources/{sr_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageResourceGet operation.
     * @callback module:api/StorageApi~storageResourceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageResourceSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the information of storage resource.
     * @param {String} srId uuid of storage resource created
     * @param {module:model/String} cloudProvider cloud provider name
     * @param {module:api/StorageApi~storageResourceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageResourceSpec}
     */
    storageResourceGet(srId, cloudProvider, callback) {
      let postBody = null;
      // verify the required parameter 'srId' is set
      if (srId === undefined || srId === null) {
        throw new Error("Missing the required parameter 'srId' when calling storageResourceGet");
      }
      // verify the required parameter 'cloudProvider' is set
      if (cloudProvider === undefined || cloudProvider === null) {
        throw new Error("Missing the required parameter 'cloudProvider' when calling storageResourceGet");
      }

      let pathParams = {
        'sr_id': srId
      };
      let queryParams = {
        'cloud_provider': cloudProvider
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageResourceSpec;
      return this.apiClient.callApi(
        '/v1alpha/storage_resources/{sr_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
