package providers

import (
	"fmt"
	"log"

	openapi "github.com/leonwanghui/osc-serverless/autogenerated/go-model"
)

// CloudProvider implementation
type CloudProvider interface {
	ComputeServiceProvider
	StorageServiceProvider
	NetworkServiceProvider
}

type ComputeServiceProvider interface {
	CreateCloudServer(*openapi.ComputeResourceCreateRequest) (*openapi.ComputeResourceSpec, error)
	GetCloudServer(Id string) (*openapi.ComputeResourceSpec, error)
	DeleteCloudServer(Id string) error

	CreatePhysicalServer(*openapi.ComputeResourceCreateRequest) (*openapi.ComputeResourceSpec, error)
	GetPhysicalServer(Id string) (*openapi.ComputeResourceSpec, error)
	DeletePhysicalServer(Id string) error

	CreatePod(*openapi.ComputeResourceCreateRequest) (*openapi.ComputeResourceSpec, error)
	GetPod(Id string) (*openapi.ComputeResourceSpec, error)
	DeletePod(Id string) error
}

type StorageServiceProvider interface {
	CreateBlockVolume(*openapi.StorageResourceCreateRequest) (*openapi.StorageResourceSpec, error)
	GetBlockVolume(Id string) (*openapi.StorageResourceSpec, error)
	DeleteBlockVolume(Id string) error

	CreateFileShare(*openapi.StorageResourceCreateRequest) (*openapi.StorageResourceSpec, error)
	GetFileShare(Id string) (*openapi.StorageResourceSpec, error)
	DeleteFileShare(Id string) error

	CreateBackup(*openapi.StorageResourceCreateRequest) (*openapi.StorageResourceSpec, error)
	GetBackup(Id string) (*openapi.StorageResourceSpec, error)
	DeleteBackup(Id string) error
}

type NetworkServiceProvider interface {
	CreateVPC(*openapi.NetworkResourceCreateRequest) (*openapi.NetworkResourceSpec, error)
	GetVPC(Id string) (*openapi.NetworkResourceSpec, error)
	DeleteVPC(Id string) error

	CreateSubnet(*openapi.NetworkResourceCreateRequest) (*openapi.NetworkResourceSpec, error)
	GetSubnet(Id string) (*openapi.NetworkResourceSpec, error)
	DeleteSubnet(Id string) error

	CreateFloatingIP(*openapi.NetworkResourceCreateRequest) (*openapi.NetworkResourceSpec, error)
	GetFloatingIP(Id string) (*openapi.NetworkResourceSpec, error)
	DeleteFloatingIP(Id string) error
}

var cps = map[string]CloudProvider{}

// NewCloudProvider implementation
func NewCloudProvider(pType string) CloudProvider {
	if cp, exist := cps[pType]; exist {
		return cp
	}

	log.Printf("%s is not registered to connector\n", pType)
	return nil
}

// RegisterCloudProvider implementation
func RegisterCloudProvider(pType string, cp CloudProvider) error {
	if _, exist := cps[pType]; exist {
		return fmt.Errorf("connector(%s) already exists", pType)
	}

	cps[pType] = cp
	return nil
}

// UnregisterCloudProvider implementation
func UnregisterCloudProvider(pType string) {
	if _, exist := cps[pType]; !exist {
		return
	}

	delete(cps, pType)
	return
}
