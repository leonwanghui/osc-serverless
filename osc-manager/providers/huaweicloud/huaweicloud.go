package huaweicloud

import (
	"encoding/json"
	"errors"
	"io/ioutil"
	"log"

	openapi "github.com/leonwanghui/osc-poc/autogenerated/go-model"
	"github.com/leonwanghui/osc-poc/osc-manager/providers"

	"github.com/ghodss/yaml"
	"github.com/gophercloud/gophercloud"
	"github.com/gophercloud/gophercloud/auth/aksk"
	"github.com/gophercloud/gophercloud/openstack"
	"github.com/gophercloud/gophercloud/openstack/blockstorage/v2/volumes"
	"github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/floatingips"
	"github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/keypairs"
	"github.com/gophercloud/gophercloud/openstack/compute/v2/servers"
	"github.com/gophercloud/gophercloud/openstack/ecs/v1/cloudservers"
	"github.com/gophercloud/gophercloud/openstack/vpc/v1/publicips"
)

const (
	HuaweicloudProvider = "huaweicloud"
	defaultConfigPath   = "/etc/osc-config/config_hwcloud.yaml"
)

var CONF = &Config{}

func init() {
	hcp, err := NewHuaweiCloudProvider()
	if err != nil {
		panic(err)
	}

	providers.RegisterCloudProvider(HuaweicloudProvider, hcp)
}

type Config struct {
	IdentityEndpoint string `json:"identityEndpoint,omitempty"`
	ProjectID        string `json:"projectID,omitempty"`
	AccessKey        string `json:"accessKey,omitempty"`
	SecretKey        string `json:"secretKey,omitempty"`
	Domain           string `json:"domain,omitempty"`
	Region           string `json:"region,omitempty"`
	DomainID         string `json:"domainID,omitempty"`
}

func parseConfig(conf interface{}, p string) (interface{}, error) {
	confYaml, err := ioutil.ReadFile(p)
	if err != nil {
		log.Printf("read config yaml file (%s) failed, reason:(%v)\n", p, err)
		return nil, err
	}
	if err = yaml.Unmarshal(confYaml, conf); err != nil {
		log.Println("parse error:", err)
		return nil, err
	}
	return conf, nil
}

func NewHuaweiCloudProvider() (*huaweiCloudProvider, error) {
	if _, err := parseConfig(CONF, defaultConfigPath); err != nil {
		return nil, err
	}

	opts := aksk.AKSKOptions{
		IdentityEndpoint: CONF.IdentityEndpoint,
		ProjectID:        CONF.ProjectID,
		AccessKey:        CONF.AccessKey,
		SecretKey:        CONF.SecretKey,
		Domain:           CONF.Domain,
		Region:           CONF.Region,
		DomainID:         CONF.DomainID,
	}

	provider, err := openstack.AuthenticatedClient(opts)
	if err != nil {
		log.Println("when get auth options:", err)
		return nil, err
	}
	cv2, err := openstack.NewComputeV2(provider, gophercloud.EndpointOpts{})
	if err != nil {
		log.Println("when get compute service session:", err)
		return nil, err
	}
	ev1, err := openstack.NewECSV1(provider, gophercloud.EndpointOpts{})
	if err != nil {
		log.Println("when get ecs service session:", err)
		return nil, err
	}
	bv2, err := openstack.NewBlockStorageV2(provider, gophercloud.EndpointOpts{})
	if err != nil {
		log.Println("when get block storage session:", err)
		return nil, err
	}
	nv1, err := openstack.NewVPCV1(provider, gophercloud.EndpointOpts{})
	if err != nil {
		log.Println("when get network service session:", err)
		return nil, err
	}

	return &huaweiCloudProvider{
		computev2:      cv2,
		ecsv1:          ev1,
		blockStoragev2: bv2,
		networkv1:      nv1,
	}, nil
}

type huaweiCloudProvider struct {
	computev2      *gophercloud.ServiceClient
	ecsv1          *gophercloud.ServiceClient
	blockStoragev2 *gophercloud.ServiceClient
	networkv1      *gophercloud.ServiceClient
}

func (hc *huaweiCloudProvider) CreateCloudServer(req *openapi.ComputeResourceCreateRequest) (
	*openapi.ComputeResourceSpec, error) {

	network, err := func() (*openapi.NetworkResourceSpec, error) {
		emptyEip := openapi.CloudServerRequestFragmentPublicipEip{}
		id, eip := req.CloudServerRequestFragment.Publicip.Id,
			req.CloudServerRequestFragment.Publicip.Eip
		if id == "" && eip != emptyEip {
			return hc.CreateFloatingIP(&openapi.NetworkResourceCreateRequest{
				PublicipRequestFragment: openapi.PublicipRequestFragment{
					Publicip: openapi.PublicipRequestFragmentPublicip{
						Type: eip.IpType,
					},
					Bandwidth: eip.Bandwidth,
				},
			})
		}
		return hc.GetFloatingIP(id)
	}()
	if err != nil {
		log.Println("public ip create error:", err)
		return nil, err
	}

	log.Println("public ip created, network resource is:", network)

	server, err := func() (*openapi.ComputeResourceSpec, error) {
		nets := make([]servers.Network, 0)
		for _, v := range req.CloudServerRequestFragment.Nics {
			net := servers.Network{UUID: v.SubnetId}
			nets = append(nets, net)
		}
		ud, err := ioutil.ReadFile(req.CloudServerRequestFragment.UserData)
		if err != nil {
			log.Printf("failed to read data from %s\n",
				req.CloudServerRequestFragment.UserData)
			return nil, err
		}
		createOpts := servers.CreateOpts{
			Name:             req.Name,
			FlavorRef:        req.CloudServerRequestFragment.FlavorRef,
			ImageRef:         req.CloudServerRequestFragment.ImageRef,
			Networks:         nets,
			AvailabilityZone: req.AvailabilityZone,
			KeyName:          req.CloudServerRequestFragment.KeyName,
			UserData:         ud,
		}
		server, err := servers.Create(hc.computev2, keypairs.CreateOptsExt{
			CreateOptsBuilder: createOpts,
		}).Extract()
		if err != nil {
			return nil, err
		}

		return hc.GetCloudServer(server.ID)
	}()
	if err != nil {
		log.Println("server create error:", err)
		return nil, err
	}

	err = floatingips.AssociateInstance(hc.computev2, server.Id, floatingips.AssociateOpts{
		FloatingIP: network.PublicipFragment.PublicIpAddress}).ExtractErr()

	server.CloudServerFragment.AccessIPv4 = network.PublicipFragment.PublicIpAddress
	return server, err
}

func (hc *huaweiCloudProvider) GetCloudServer(crId string) (
	*openapi.ComputeResourceSpec, error) {

	server, err := cloudservers.Get(hc.ecsv1, crId).Extract()
	if err != nil {
		log.Println("server get error:", err)
		return nil, err
	}

	// convert server to openapi.ComputeResourceSpec
	crSpec := &openapi.ComputeResourceSpec{
		CloudServerFragment: openapi.CloudServerResourceFragment{},
	}
	sJson, _ := json.Marshal(server)
	json.Unmarshal(sJson, crSpec)
	json.Unmarshal(sJson, &crSpec.CloudServerFragment)

	return crSpec, nil
}

func (hc *huaweiCloudProvider) DeleteCloudServer(crId string) error {

	if err := servers.Delete(hc.computev2, crId).ExtractErr(); err != nil {
		log.Println("server delete error:", err)
		return err
	}

	// try to remove all remaining public ips
	allPages, err := publicips.List(hc.networkv1, publicips.ListOpts{}).AllPages()
	if err != nil {
		log.Println("public ip list error:", err)
		return err
	}
	networks, err := publicips.ExtractPublicIPs(allPages)
	if err != nil {
		log.Println("public ips extract error:", err)
		return err
	}
	for _, network := range networks {
		publicips.Delete(hc.networkv1, network.ID).ExtractErr()
		log.Printf("remove network (%s) successfully!\n", network.ID)
	}

	return nil
}

func (hc *huaweiCloudProvider) CreateBlockVolume(req *openapi.StorageResourceCreateRequest) (
	*openapi.StorageResourceSpec, error) {

	createOpts := volumes.CreateOpts{
		AvailabilityZone: req.AvailabilityZone,
		Description:      req.Description,
		Size:             int(req.Size),
		Name:             req.Name,
		VolumeType:       req.BlockVolumeRequestFragment.VolumeType,
	}
	volume, err := volumes.Create(hc.blockStoragev2, createOpts).Extract()
	if err != nil {
		log.Println("volume create error:", err)
		return nil, err
	}

	return hc.GetBlockVolume(volume.ID)
}

func (hc *huaweiCloudProvider) GetBlockVolume(srId string) (
	*openapi.StorageResourceSpec, error) {

	volume, err := volumes.Get(hc.blockStoragev2, srId).Extract()
	if err != nil {
		log.Println("volume get error:", err)
		return nil, err
	}

	// convert volume to openapi.StorageResourceSpec
	srSpec := &openapi.StorageResourceSpec{
		BlockVolumeFragment: openapi.BlockVolumeResourceFragment{},
	}
	vJson, _ := json.Marshal(volume)
	json.Unmarshal(vJson, srSpec)
	json.Unmarshal(vJson, &srSpec.BlockVolumeFragment)

	return srSpec, nil
}

func (hc *huaweiCloudProvider) DeleteBlockVolume(srId string) error {

	if err := volumes.Delete(hc.blockStoragev2, srId).ExtractErr(); err != nil {
		log.Println("volume delete error:", err)
		return err
	}

	return nil
}

func (hc *huaweiCloudProvider) CreateFloatingIP(req *openapi.NetworkResourceCreateRequest) (
	*openapi.NetworkResourceSpec, error) {

	createOpts := publicips.CreateOpts{
		Publicip: publicips.PublicIPRequest{
			Type:      req.PublicipRequestFragment.Publicip.Type,
			IPVersion: 4,
			IpAddress: req.PublicipRequestFragment.Publicip.IpAddress,
		},
		Bandwidth: publicips.BandWidth{
			Name:      req.PublicipRequestFragment.Bandwidth.Name,
			ShareType: req.PublicipRequestFragment.Bandwidth.Sharetype,
			Size:      int(req.PublicipRequestFragment.Bandwidth.Size),
		},
	}
	network, err := publicips.Create(hc.networkv1, createOpts).Extract()
	if err != nil {
		log.Println("public ip create error:", err)
		return nil, err
	}

	return hc.GetFloatingIP(network.ID)
}

func (hc *huaweiCloudProvider) GetFloatingIP(nrId string) (
	*openapi.NetworkResourceSpec, error) {

	network, err := publicips.Get(hc.networkv1, nrId).Extract()
	if err != nil {
		log.Println("public ip get error:", err)
		return nil, err
	}

	// convert network to openapi.NetworkResourceSpec
	nrSpec := &openapi.NetworkResourceSpec{
		PublicipFragment: openapi.PublicipResourceFragment{},
	}
	nJson, _ := json.Marshal(network)
	json.Unmarshal(nJson, nrSpec)
	json.Unmarshal(nJson, &nrSpec.PublicipFragment)

	return nrSpec, nil
}

func (hc *huaweiCloudProvider) DeleteFloatingIP(nrId string) error {

	if err := publicips.Delete(hc.networkv1, nrId).ExtractErr(); err != nil {
		log.Println("public ip delete error:", err)
		return err
	}

	return nil
}

func (hc *huaweiCloudProvider) CreatePhysicalServer(*openapi.ComputeResourceCreateRequest) (
	*openapi.ComputeResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) GetPhysicalServer(Id string) (*openapi.ComputeResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) DeletePhysicalServer(Id string) error {
	return errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) CreatePod(*openapi.ComputeResourceCreateRequest) (
	*openapi.ComputeResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) GetPod(Id string) (*openapi.ComputeResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) DeletePod(Id string) error {
	return errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) CreateFileShare(*openapi.StorageResourceCreateRequest) (
	*openapi.StorageResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) GetFileShare(Id string) (*openapi.StorageResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) DeleteFileShare(Id string) error {
	return errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) CreateBackup(*openapi.StorageResourceCreateRequest) (
	*openapi.StorageResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) GetBackup(Id string) (*openapi.StorageResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) DeleteBackup(Id string) error {
	return errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) CreateVPC(*openapi.NetworkResourceCreateRequest) (
	*openapi.NetworkResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) GetVPC(Id string) (*openapi.NetworkResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) DeleteVPC(Id string) error {
	return errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) CreateSubnet(*openapi.NetworkResourceCreateRequest) (
	*openapi.NetworkResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) GetSubnet(Id string) (*openapi.NetworkResourceSpec, error) {
	return nil, errors.New("Not implemented")
}

func (hc *huaweiCloudProvider) DeleteSubnet(Id string) error {
	return errors.New("Not implemented")
}
