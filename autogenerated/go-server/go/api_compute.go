/*
 * Open Service Cloud API
 *
 * Open Service Cloud API to manage different backend cloud services.
 *
 * API version: 0.0.1
 * Contact: wanghui71leon@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"

	"github.com/gorilla/mux"
	openapi "github.com/leonwanghui/osc-poc/autogenerated/go-model"
	c "github.com/leonwanghui/osc-poc/osc-manager/controller"
)

var ctr = c.NewController()
var emptyBody = make(map[string]interface{})

func handleError(w http.ResponseWriter, code int, errMsg string) {
	output, _ := json.Marshal(&openapi.ErrorSpec{
		Code:    int32(code),
		Message: errMsg,
	})

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(code)
	w.Write(output)
}

func handleResult(w http.ResponseWriter, code int, result interface{}) {
	output, _ := json.Marshal(result)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(code)
	w.Write(output)
}

// ComputeResourceCreate - create a new compute resource.
func ComputeResourceCreate(w http.ResponseWriter, r *http.Request) {
	var req openapi.ComputeResourceCreateRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		handleError(w, http.StatusBadRequest, err.Error())
		return
	}

	compute, err := ctr.CreateComputeResource(&req)
	if err != nil {
		handleError(w, http.StatusInternalServerError, err.Error())
		return
	}

	handleResult(w, http.StatusCreated, compute)
	return
}

// ComputeResourceDelete - remove specified compute resource.
func ComputeResourceDelete(w http.ResponseWriter, r *http.Request) {
	crID := mux.Vars(r)["cr_id"]
	cp := r.URL.Query().Get("cloud_provider")
	cas := r.URL.Query().Get("delete_publicip")
	if crID == "" || cp == "" || cas == "" {
		handleError(w, http.StatusBadRequest,
			"url params 'cr_id' or 'cloud_provider' or 'delete_publicip' is missing")
		return
	}

	if err := ctr.DeleteComputeResource(crID); err != nil {
		handleError(w, http.StatusInternalServerError, err.Error())
		return
	}

	handleResult(w, http.StatusOK, emptyBody)
	return
}

// ComputeResourceGet - get the information of compute resource.
func ComputeResourceGet(w http.ResponseWriter, r *http.Request) {
	crID := mux.Vars(r)["cr_id"]
	cp := r.URL.Query().Get("cloud_provider")
	if crID == "" || cp == "" {
		handleError(w, http.StatusBadRequest,
			"url params 'cr_id' or 'cloud_provider' is missing")
		return
	}

	compute, err := ctr.GetComputeResource(crID)
	if err != nil {
		handleError(w, http.StatusInternalServerError, err.Error())
		return
	}

	handleResult(w, http.StatusOK, compute)
	return
}
